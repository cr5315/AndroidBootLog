apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'

if (project.hasProperty("BootLog.signing")
        && new File(project.property("BootLog.signing") + ".gradle").exists()) {
    apply from: project.property("BootLog.signing") + ".gradle";
}

// Application name
ext.applicationName = 'BootLog'

// Dependency versions
ext.aboutLibrariesVersion = '5.9.1'
ext.androidSupportVersion = '25.1.0'
ext.butterKnifeVersion = '8.2.1'

// Realm
ext.realmName = "\"bootlog.realm\""
ext.realmSchemaVersion = "1"

// Versioning
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0


android {
    compileSdkVersion 25
    buildToolsVersion "24.0.2"
    defaultConfig {
        applicationId "me.butzow.bootlog"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField("String", "REALM_NAME", realmName)
        buildConfigField("long", "REALM_SCHEMA_VERSION", realmSchemaVersion)
    }
    buildTypes {
        debug {
            minifyEnabled true
            useProguard false

            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"

            applicationVariants.all { variant ->
                renameApk(variant, defaultConfig, 'debug')
            }
        }
        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->
                renameApk(variant, defaultConfig, 'release')
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    compile "com.android.support:appcompat-v7:$androidSupportVersion"
    compile "com.android.support:cardview-v7:$androidSupportVersion"
    compile "com.android.support:design:$androidSupportVersion"
    compile "com.android.support:recyclerview-v7:$androidSupportVersion"

    compile "com.jakewharton:butterknife:$butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"

    compile("com.mikepenz:aboutlibraries:$aboutLibrariesVersion@aar") { transitive = true }
}

def renameApk(variant, defaultConfig, buildType) {
    variant.outputs.each { output ->
        def formattedDate = new Date().format('MM-dd-yyyy')

        def file = output.packageApplication.outputFile
        def fileName = applicationName + "_V" + defaultConfig.versionName + "_C" + defaultConfig.versionCode + "_" + formattedDate + "_" + buildType + ".apk"
        output.packageApplication.outputFile = new File(file.parent, fileName)
    }
}